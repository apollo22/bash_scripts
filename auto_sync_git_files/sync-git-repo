#! /bin/bash
# Script to push all modified files to remote

# Check if git is installed
! git --version > /dev/null && echo "Git is not installed" && exit 1

function git_commit_all_files () {

  # Check if arguments are given
  if [[ ! $# -eq 1 ]]; then
    echo "usage: $0 <path_to_git_folder>"
    exit 1
  fi

  #TODO # Check if given folder exists
  #  if -d


  #TODO # Check if folder is a git folder

  # Go to related git folder
  cd $1

  # Commit unstaged files
  ## Commit changed and removed files
  while read file; do
    file_name=$( echo $file | cut -d " " -f 2 )
    file_status=$( echo $file | cut -b 1 )
    if [[ $file_status = "M" ]]; then
      git add $file_name
      git commit --message "Modify $file_name"
    elif [[ $file_status = "D" ]]; then
      git add $file_name
      git commit --message "Remove $file_name"
    else
      echo Error: Unstaged files: git diff: $file
    fi
  done < <(git diff --name-status )

  ## Commit new files
  while read file; do
    file_name=$( echo $file | cut -d "'" -f 2 )
    git add $file_name
    git commit -m "Add $file_name"
  done < <(git add -nA)

  # Commit staged files
  while read file; do
    file_name=$( echo $file | cut -d " " -f 2 )
    file_status=$( echo $file | cut -b 1 )
    if [[ $file_status = "M" ]]; then
      git commit --message "Modify $file_name"
    elif [[ $file_status = "D" ]]; then
      git commit --message "Remove $file_name"
    elif [[ $file_status = "A" ]]; then
      git commit --message "Add $file_name"
    else
      echo Error: Staged files: git diff: $file
    fi
  done < <(git diff --name-status --cached )

  # Go back to previous folder
  cd - > /dev/null
}

# Check if arguments are given
if [[ $# -eq 0 ]]; then # No folder is given to the function
  # Default to current folder
  git_commit_all_files .
else # Folders where given
  for folder in $@; do
    git_commit_all_files $folder
  done
fi

